
import {Notice, Plugin, Setting} from 'obsidian';
import { App, Modal } from 'obsidian';



interface HappyRefSettings {
	template: string;
	shouldUseParagraphTemplate: boolean;
	shouldBoldSearchTerm: boolean;
	paragraphTemplate: string;
	language: string;
}

class HappyRefPluginSettings {
}

const DEFAULT_SETTINGS:  HappyRefPluginSettings = {
	template: `{{text}}\n> [Wikipedia]({{url}})`,
	shouldUseParagraphTemplate: true,
	shouldBoldSearchTerm: true,
	paragraphTemplate: `> {{paragraphText}}\n>\n`,
	language: "en",
};

async function CrossRefAPI () {
	function handleNotFound(searchTerm: string) {
		new Notice(`${searchTerm} not found.`);
	}

	/*parseResponse(json: any): WikipediaExtract | undefined {
		const pages = json.query.pages;
		const pageKeys = Object.keys(pages);
		if (pageKeys.includes("-1")) {
			return undefined;
		}
		const extracts: WikipediaExtract[] = pageKeys.map((key) => {
			const page = pages[key];
			const extract: WikipediaExtract = {
				title: page.title,
				text: page.extract,
				url: this.getUrl(page.title),
			};
			return extract;
		});
		return extracts[0];
	}

*/
	let DOI = "10.1002/phar.2842";
	let searchUrl = `https://api.crossref.org/works/${encodeURIComponent(DOI)}`;

	const response = await fetch('https://api.crossref.org/works/10.1002%2Fphar.2842');
	const data = await response.json();
	console.log(data);
	console.log(`MDB | api ${DOI} queried by Title`);
	console.log(`${searchUrl}`)



	return data.toString();


}

	class HappyRefModal extends Modal {
	constructor(app: App, onSubmit: (result: string) => void) {
		super(app);
		this.setTitle('Enter the DOI');

		let name = '';
		new Setting(this.contentEl)
			.setName('Name')
			.addText((text) =>
				text.onChange((value) => {
					name = value;
				}));

		new Setting(this.contentEl)
			.addButton((btn) =>
				btn
					.setButtonText('Submit')
					.setCta()
					.onClick(() => {
						this.close();
						onSubmit(name);
					}));
	}
}


export default class ExamplePlugin extends Plugin {
	async onload() {



		this.addRibbonIcon('sticker', 'Print to console', () => {
			console.log('Sticker clicked');
			new HappyRefModal(this.app,
				(result) => {
					new Notice(`DOI imported from ${result}!`);

					let Folder = "SettingsToDoLater";
					let FileName = `${Folder}/${result}.md`;
					let Content =
						"---\n" +
						"test: t4est\n" +
						"---\n\n"+
						CrossRefAPI();


					// https://stackoverflow.com/questions/48538814/angular-typescript-call-a-function-after-another-one-has-been-completed
					this.app.vault.create(FileName, Content).then(res => this.app.workspace.openLinkText(FileName, ""));;
					console.log(`Created new file for ${FileName}`);



				}).open();
		});

	}
}


function parseResponse(json: any, any: any) {
    throw new Error('Function not implemented.');
}

